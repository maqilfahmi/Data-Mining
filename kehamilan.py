# -*- coding: utf-8 -*-
"""kehamilan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L4g1fFK2mlTFcq1fgpMPKay4SQ_B9rft
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report

# 1. Load data ke dalam DataFrame
data = {
    'NO': list(range(1, 91)),
    'NAMA': [f'NAMA {i}' for i in range(1, 91)],
    'USIA': ['23 TH', '29 TH', '20 TH', '18 TH', '34 TH', '28 TH', '36 TH', '28 TH', '39 TH', '37 TH',
             '16 TH', '24 TH', '31 TH', '35 TH', '28 TH', '13 TH', '21 TH', '36 TH', '40 TH', '23 TH',
             '31 TH', '28 TH', '31 TH', '25 TH', '25 TH', '27 TH', '24 TH', '26 TH', '28 TH', '30 TH',
             '38 TH', '27 TH', '23 TH', '21 TH', '29 TH', '26 TH', '23 TH', '33 TH', '29 TH', '22 TH',
             '27 TH', '24 TH', '33 TH', '21 TH', '39 TH', '23 TH', '37 TH', '21 TH', '33 TH', '35 TH',
             '24 TH', '30 TH', '29 TH', '24 TH', '41 TH', '30 TH', '31 TH', '27 TH', '16 TH',
             '33 TH', '41 TH', '35 TH', '23 TH', '31 TH', '31 TH', '22 TH', '29 TH', '27 TH',
             '27 TH', '15 TH', '27 TH', '22 TH', '23 TH', '35 TH', '25 TH', '29 TH', '29 TH',
             '26 TH', '19 TH', '21 TH', '28 TH', '28 TH', '25 TH', '29 TH', '40 TH'],
    'PARITAS': [3, 2, 1, 1, 3, 3, 4, 2, 4, 3,
                0, 1, 3, 3, 2, 1, 1, 3, 3, 2,
                2, 2, 3, 1, 2, 2, 1, 1, 2, 2,
                3, 1, 1, 3, 2, 3, 1, 3, 1, 1,
                2, 1, 1, 0, 1, 1, 4, 1, 2, 3,
                2, 2, 3, 3, 1, 2, 2, 1, 2, 1,
                1, 2, 2, 3, 2, 1, 1, 1, 1, 1,
                2, 1, 1, 2, 2, 1, 2, 1, 1, 2,
                2, 1, 2, 2, 1, 2, 2, 1, 2, 2,
                1, 1, 1, 2, 2, 1, 1, 1, 1, 1],
    'JARAK KELAHIRAN': ['< 2 tahun', '< 2 tahun', 'anak pertama', 'anak pertama', '> 2 tahun',
                        '< 2 tahun', '> 2 tahun', '> 2 tahun', '< 2 tahun', '> 2 tahun',
                        'anak pertama', 'anak pertama', '< 2 tahun', '> 2 tahun',
                        '< 2 tahun', 'anak pertama', 'anak pertama', '> 2 tahun',
                        '> 2 tahun', '< 2 tahun', '> 2 tahun', '> 2 tahun', '< 2 tahun',
                        '< 2 tahun', '< 2 tahun', '< 2 tahun', 'anak pertama', 'anak pertama',
                        '< 2 tahun', '< 2 tahun', '< 2 tahun', '< 2 tahun', '< 2 tahun',
                        '< 2 tahun', 'anak pertama', '< 2 tahun', '< 2 tahun',
                        '> 2 tahun', '> 2 tahun', '> 2 tahun', '> 2 tahun',
                        'anak pertama', 'anak pertama', 'anak pertama', 'anak pertama',
                        'anak pertama', 'anak pertama', '> 2 tahun', '< 2 tahun',
                        '> 2 tahun', '> 2 tahun', '> 2 tahun', '> 2 tahun',
                        '> 2 tahun', 'anak pertama', 'anak pertama', 'anak pertama',
                        '> 2 tahun', 'anak pertama', 'anak pertama', 'anak pertama',
                        '< 2 tahun', '> 2 tahun', '> 2 tahun', '> 2 tahun',
                        '> 2 tahun', '> 2 tahun', '> 2 tahun', '> 2 tahun',
                        '> 2 tahun', 'anak pertama', '> 2 tahun', 'anak pertama',
                        '> 2 tahun', '> 2 tahun', '> 2 tahun', '> 2 tahun',
                        '< 2 tahun', '< 2 tahun', '< 2 tahun', '< 2 tahun',
                        '> 2 tahun', '> 2 tahun', '< 2 tahun', 'anak pertama',
                        'anak pertama', 'anak pertama', 'anak pertama',
                        'anak pertama', 'anak pertama', 'anak pertama', 'anak pertama',
                        '> 2 tahun', '> 2 tahun', '< 2 tahun', '> 2 tahun'],
    'RIW HIPERTENSI': ['Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak',
                       'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Ya', 'Tidak', 'Tidak',
                       'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak',
                       'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak',
                       'Tidak', 'Ya', 'Tidak', 'Tidak', 'Ya', 'Ya', 'Ya', 'Tidak',
                       'Tidak', 'Tidak', 'Ya', 'Ya', 'Tidak', 'Tidak', 'Tidak',
                       'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Ya',
                       'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
                       'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
                       'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
                       'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
                       'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya'],
    'RIW PE': ['Tidak', 'PEB', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak',
               'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak',
               'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak',
               'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak', 'Tidak',
               'Tidak', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
               'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
               'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
               'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
               'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
               'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
               'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya',
               'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya', 'Ya'],
    'PE/NON PE': ['PE', 'PE', 'NON PE', 'NON PE', 'NON PE', 'NON PE', 'NON PE',
                  'NON PE', 'NON PE', 'NON PE', 'NON PE', 'NON PE', 'NON PE',
                  'NON PE', 'NON PE', 'NON PE', 'NON PE', 'NON PE', 'NON PE',
                  'NON PE', 'PE', 'NON PE', 'NON PE', 'NON PE', 'NON PE',
                  'NON PE', 'NON PE', 'NON PE', 'NON PE', 'NON PE', 'NON PE',
                  'NON PE', 'NON PE', 'PE', 'NON PE', 'PE', 'NON PE',
                  'NON PE', 'NON PE', 'NON PE', 'PE', 'NON PE', 'NON PE',
                  'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE',
                  'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE',
                  'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE',
                  'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE',
                  'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE',
                  'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE', 'PE']
}

# Membuat DataFrame dengan panjang terpendek
max_length = max(len(data['NO']), len(data['NAMA']), len(data['USIA']),
                 len(data['PARITAS']), len(data['JARAK KELAHIRAN']),
                 len(data['RIW HIPERTENSI']), len(data['RIW PE']),
                 len(data['PE/NON PE']))

# Menambah nilai NaN untuk kolom yang lebih pendek
for key in data:
    if len(data[key]) < max_length:
        data[key] += [np.nan] * (max_length - len(data[key]))

# Membuat DataFrame
df = pd.DataFrame(data)

# 2. Pra-pemrosesan data
df = pd.DataFrame(data)

# Menghapus kolom yang tidak perlu
df.drop(columns=['NO', 'NAMA'], inplace=True)

# Mengubah usia menjadi integer
df['USIA'] = df['USIA'].str.extract('(\d+)')  # Ekstrak angka
df['USIA'] = df['USIA'].astype(float)  # Konversi ke float (biarkan jika ada NaN)
# Mengisi NaN dengan rata-rata usia
df['USIA'].fillna(df['USIA'].mean(), inplace=True)  # Mengisi NaN dengan rata-rata
df['USIA'] = df['USIA'].astype(int)  # Konversi kembali ke int

# Mengubah kolom kategori menjadi variabel dummy
df = pd.get_dummies(df, drop_first=True)

# Memisahkan fitur dan label
X = df.drop(columns=['PE/NON PE_PE'])
y = df['PE/NON PE_PE']

# Visualisasi
plt.figure(figsize=(10, 6))
sns.histplot(df['USIA'], bins=10, kde=True)
plt.title('Distribusi Usia')
plt.xlabel('Usia')
plt.ylabel('Frekuensi')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='PE/NON PE_PE', y='USIA', data=df)
plt.title('Perbandingan Usia berdasarkan Kategori PE/NON PE')
plt.xlabel('Kategori PE/NON PE')
plt.ylabel('Usia')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='PE/NON PE_PE', data=df)
plt.title('Jumlah Kategori PE/NON PE')
plt.xlabel('Kategori PE/NON PE')
plt.ylabel('Jumlah')
plt.show()

# 3. Membagi data menjadi train dan test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Mengatasi ketidakseimbangan kelas dengan SMOTE


smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

# 5. Melatih model Random Forest
model = RandomForestClassifier(random_state=42)
model.fit(X_train_resampled, y_train_resampled)

# 6. Melakukan prediksi pada data test
y_pred = model.predict(X_test)

# 7. Mengevaluasi model

# Menampilkan confusion matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Menampilkan classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))