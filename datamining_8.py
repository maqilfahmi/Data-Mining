# -*- coding: utf-8 -*-
"""DataMining-8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tf2G6h_rPlwpYycbe56nJQ7BVibjBph2
"""

import pandas as pd

# Membaca file Excel
file_path = 'Produksi_Padi.xlsx'
data = pd.read_excel(file_path)

# Pastikan data terlihat benar
print(data.head())

# Pilih kolom yang relevan
data_cleaned = data[['Tahun', 'Produksi Padi(Ton)']].dropna()

# Ubah nama kolom untuk memudahkan
data_cleaned.columns = ['Tahun', 'Produksi_Padi']

data_cleaned['Produksi_Padi_Lag'] = data_cleaned['Produksi_Padi'].shift(1)

# Hapus nilai NaN yang dihasilkan oleh lagging
data_lagged = data_cleaned.dropna()

# Memisahkan fitur dan target
X = data_lagged[['Produksi_Padi_Lag']]
y = data_lagged['Produksi_Padi']

from sklearn.model_selection import train_test_split

# Memisahkan fitur (Produksi_Padi_Lag) dan target (Produksi_Padi)
X = data_lagged[['Produksi_Padi_Lag']]
y = data_lagged['Produksi_Padi']

# Membagi data menjadi 70% training dan 30% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, shuffle=False)

from sklearn.linear_model import LinearRegression

# Melatih model
model = LinearRegression()
model.fit(X_train, y_train)

# 4. Evaluasi Model (MSE, RMSE, MAPE)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mape = mean_absolute_percentage_error(y_test, y_pred)

# Cetak hasil evaluasi dan koefisien model
print("Hasil Evaluasi Model:")
print(f"MSE  : {mse:.2f}")
print(f"RMSE : {rmse:.2f}")
print(f"MAPE : {mape:.2%}")
print("\nKoefisien Model:")
print(f"Intercept  : {model.intercept_}")
print(f"Coefficient: {model.coef_[0]}")

# Pastikan input memiliki struktur DataFrame dengan nama kolom yang sesuai dengan pelatihan model
import pandas as pd

# Data tahun terakhir (pastikan data_lagged telah didefinisikan sebelumnya)
last_production = data_lagged.iloc[-1]['Produksi_Padi']  # Produksi terakhir dalam dataset (2022)

# Prediksi 2023
input_2023 = pd.DataFrame({'Produksi_Padi_Lag': [last_production]})  # Nama kolom harus sama seperti saat training
production_2023 = model.predict(input_2023)[0]

# Prediksi 2024 (gunakan prediksi 2023 sebagai input)
input_2024 = pd.DataFrame({'Produksi_Padi_Lag': [production_2023]})
production_2024 = model.predict(input_2024)[0]

# Cetak hasil prediksi
print("\nPrediksi Produksi Padi:")
print(f"Tahun 2023: {production_2023:.2f} Ton")
print(f"Tahun 2024: {production_2024:.2f} Ton")

import matplotlib.pyplot as plt

# Data aktual (dari data_lagged)
years_actual = data_lagged['Tahun']
production_actual = data_lagged['Produksi_Padi']

# Data prediksi
years_pred = [2023, 2024]
production_pred = [production_2023, production_2024]

# Visualisasi
plt.figure(figsize=(10, 6))

# Plot data aktual
plt.plot(years_actual, production_actual, label='Produksi Aktual', marker='o', color='blue')

# Plot data prediksi
plt.plot(years_pred, production_pred, label='Produksi Prediksi', marker='o', linestyle='--', color='red')

# Tambahkan label dan judul
plt.xlabel('Tahun')
plt.ylabel('Produksi Padi (Ton)')
plt.title('Produksi Padi: Aktual dan Prediksi')
plt.axvline(x=2022.5, color='gray', linestyle=':', label='Mulai Prediksi')
plt.legend()

# Tampilkan grafik
plt.grid(True)
plt.show()